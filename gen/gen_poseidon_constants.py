import json
from more_itertools import chunked
from pprint import pprint
from string import Template
from pathlib import Path

OUTPUT_DIR_RELATIVE = "../pact/contracts"
OUTPUT_FILE = "poseidon-constants.pact"


TEMPLATE = """
(module poseidon-constants-v1 GOV
  "Constants for the Poseidon Hash algortihm"
  ; Module generated by $script

  (defcap GOV() false)

  (defconst CST-T2 $obj2)

  (defconst CST-T3 $obj3)

  (defconst CST-T4 $obj4)

  (defconst CST-T5 $obj5)

  (defconst CST-T6 $obj6)

)
 """

script = Path(__file__)
current_dir = script.resolve().parent
outfile = current_dir.joinpath(OUTPUT_DIR_RELATIVE, OUTPUT_FILE).resolve()

jsonfile = current_dir.joinpath("poseidon_constants.json")

def from_hex(x):
    return int(x, 16)

def load_arc(data, T):
    return chunked(map(from_hex, data['C'][T-2]), T)

def load_mat(data, T):
    for line in data['M'][T-2]:
        yield list(map(from_hex, line))

with open(jsonfile.resolve()) as fd:
    data = json.load(fd)

tmpl = Template(TEMPLATE)

obj = {x:{'MATRIX': list(load_mat(data, x)), 'ARC-CONST':list(load_arc(data,x))} for x in range(2,7)}

objs = {k:json.dumps(v, separators=(',', ':')) for k,v in obj.items()}

with open(outfile, "w") as fd:
    fd.write(tmpl.substitute(script=script.name, obj2=objs[2], obj3=objs[3], obj4=objs[4], obj5=objs[5], obj6=objs[6]))

print("{} written".format(outfile))
